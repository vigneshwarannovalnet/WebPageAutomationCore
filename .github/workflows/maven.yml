name: Java CI with Maven

on:
  schedule:
    - cron: "30 0 * * *"  # 12:30 AM UTC -> 6:00 AM IST
  workflow_dispatch: # Allows manual trigger of the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin' # Temurin is the recommended OpenJDK distribution
          cache: maven # Cache Maven dependencies

      # Step 3: Add permissions to files (optional for debugging file permissions)
      - name: Set write permissions
        run: chmod -R u+w src/test/resources/

      # Step 4: Run the specific Maven test
      - name: Maven Test
        run: mvn clean test -DsuiteXmlFile=src/test/resources/Suits/broken-link-and-image-tests.xml -DGITHUB=true -DHEADLESS=true

      # Step 5: Debug the DE and EN XLSX files to ensure they were written
      - name: Debug the XLSX files
        run: |
          echo "Checking if the DE file exists and is not empty"
          ls -lh src/test/resources/DE_HomePage.xlsx
          echo "Checking if the EN file exists and is not empty"
          ls -lh src/test/resources/EN_HomePage.xlsx

      # Step 6: Zip the generated XLSX files (DE_HomePage.xlsx and EN_HomePage.xlsx)
      - name: Zip test results
        run: |
          zip test-results.zip src/test/resources/DE_HomePage.xlsx src/test/resources/EN_HomePage.xlsx

      # Step 7: Upload the zip file as an artifact
      - name: Upload test results zip
        if: always()  # Ensure this step runs even if tests fail
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results.zip

  send_email:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download test results artifact
        uses: actions/download-artifact@v3
        with:
          name: test-results
          path: ./test-results

      - name: Verify test-results.zip exists
        run: |
          echo "Checking if test-results.zip exists in the expected directory..."
          ls -lh ./test-results/
          if [ ! -f "./test-results/test-results.zip" ]; then
            echo "Error: test-results.zip file not found!"
            exit 1
          fi
          echo "test-results.zip is present and ready for email attachment."

      - name: Debug SendGrid API Key
        run: |
          if [ -z "${{ secrets.SENDGRID_API_KEY }}" ]; then
            echo "Error: SENDGRID_API_KEY is not set in GitHub Secrets."
            exit 1
          else
            echo "SENDGRID_API_KEY is set."
          fi

      - name: Send Email with Test Results
        run: |
          echo "Preparing to send email with SendGrid..."
          ZIP_FILE_CONTENT=$(base64 -w 0 ./test-results/test-results.zip)
          RESPONSE=$(curl -s -o response.txt -w "%{http_code}" -X POST https://api.sendgrid.com/v3/mail/send \
            -H "Authorization: Bearer ${{ secrets.SENDGRID_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
                  "personalizations": [
                    {
                      "to": [{"email": "vigneshwaran_m@novalnetsolutions.com"}],
                      "subject": "GitHub Actions Test Results"
                    }
                  ],
                  "from": {"email": "noreply@example.com"},
                  "content": [
                    {
                      "type": "text/plain",
                      "value": "The test results are available. Please check the attached zip file.\n\nTest Results: test-results.zip"
                    }
                  ],
                  "attachments": [
                    {
                      "content": "'"${ZIP_FILE_CONTENT}"'",
                      "filename": "test-results.zip",
                      "type": "application/zip",
                      "disposition": "attachment"
                    }
                  ]
                }')
          echo "SendGrid API response code: $RESPONSE"
          echo "SendGrid API response body:"
          cat response.txt

          if [ "$RESPONSE" -ne 202 ]; then
            echo "Error: Failed to send email. Response code $RESPONSE"
            exit 1
          else
            echo "Email successfully sent via SendGrid."
          fi
